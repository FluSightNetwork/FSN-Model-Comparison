scale_x_continuous(expand=c(0,.01), limits=c(0,1))+
theme(legend.position = "none"))
library(purrr)
?map
1:10 %>% map(rnorm, n = 10) %>% map_dbl(mean)
1:10 %>% map(rpois, n = 10) %>% map_dbl(mean)
1:10 %>% map(rgamma, n = 10) %>% map_dbl(mean)
1:10 %>% map(rbeta, n = 10) %>% map_dbl(mean)
c(1:10, 10:20) %>% map(rbeta, n = 10) %>% map_dbl(mean)
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map_dfr(~ as.data.frame(t(as.matrix(coef(.)))))
FORECAST_EW <- MMWRweek(as.Date(Sys.Date()))[1,2] - 2
glimpse(scores)
glimpse(scores_adj)
runApp('FSN_Model_Comparison')
runApp('FSN_Model_Comparison')
runApp('FSN_Model_Comparison')
point_ests <- read_csv("data/point_ests.csv")
setwd("~/reichlab/FSN_Model_Comparison")
point_ests <- read_csv("data/point_ests.csv")
View(point_ests)
View(scores)
test <- merge(scores_adj, point_ests, by = c(Model, `Model Week`))
test <- merge(scores_adj, point_ests, by = c('Model', `Model Week`))
test <- merge(scores_adj, point_ests)
View(scores_adj)
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = Calender.Week, Target, err)
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err)
test <- merge(point_ests, scores_adj, by = c(Model, Year, Epiweek, Target))
test <- merge(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"))
View(test)
test <- merge(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"), all = T)
View(test)
test <- right_join(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"), all = T)
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = factor(Calendar.Week), Target, err)
point_ests <- read_csv("data/point_ests.csv")
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = factor(Calendar.Week), Target, err)
View(point_ests)
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err)
point_ests$Epiweek <- as.factor(point_ests$Epiweek)
test <- right_join(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"), all = T)
View(test)
test <- right_join(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"))
test <- outer_join(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"))
test <- full_join(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"))
View(test)
test <- left_join(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"))
View(simu_ys)
View(test)
test <- inner_join(point_ests, scores_adj, by = c("Model", "Year", "Epiweek", "Target"))
test <- merge(point_ests, scores_adj, by = c("Model"), all = T)
View(test)
runApp()
runApp()
runApp()
runApp()
scores_adj[1:10,]
point_ests[1:10,]
point_ests <- point_ests %>% mutate(err = abs(err))
point_ests[1:10,]
?abs
exp(54)
log(54, base = exp(1))
exp(log(54, base = exp(1)))
nrow(point_ests
nrow(point_ests)
nrow(point_ests)
nrow(scores_adj)
point_ests_adj <- point_ests %>%
filter(Model %in% complete_models) %>%
## if NA, NaN or <-10, set score to -10
mutate(point_ests_adj = dplyr::if_else(is.nan(!!err) | is.na(!!err) ,
-10,
!!err),
Target_Type = dplyr::if_else(Target %in% c("Season onset", "Season peak week", "Season peak percentage"),
"seasonal", "k-week-ahead"),
Model_Type = ifelse(Model %in% compartment, "Compartmental", "Non Compartmental")) %>%
mutate(point_ests_adj = dplyr::if_else(point_ests_adj < -10 , -10, point_ests_adj))
View(point_ests)
nrow(na.omit(point_ests))
nrow(scores_adj)
nrow(point_ests %>% na.omit() %>% filter(!(Epiweek %in% c(41, 42, 53)))
)
point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
nrow()
point_ests <- read_csv("data/point_ests.csv")
select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
nrow()
point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
nrow()
point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
filter(Model %in% complete_models) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
nrow()
complete_models
point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
filter(Model %in% complete_models) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
nrow()
complete_models <- c(models$`model-id`[models$complete=="true"], "UTAustin-edm")
scores <- read_csv("data/scores.csv")
models <- read_csv("data/model-id-map.csv")
point_ests <- read_csv("data/point_ests.csv")
complete_models <- c(models$`model-id`[models$complete=="true"], "UTAustin-edm")
compartment <- c("CU-EAKFC_SEIRS", "CU-EAKFC_SIRS", "CU-EKF_SEIRS","CU-EKF_SIRS",
"CU-RHF_SIRS","CU-RHF_SEIRS","LANL-DBM")
backfill <- c("LANL-DBM")
point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
filter(Model %in% complete_models) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
nrow()
point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
filter(Model %in% complete_models)
View(point_ests)
unique(point_ests$model_name)
test <- scores_adj %>% filter(Model != "UTAustin-edm")
nrow(acores_adj)
nrow(scores_adj)
nrow(test)
nrow(point_ests)
nrow(point_ests %>% na.omit())
nrow(point_ests %>% na.omit() %>% filter(!(Epiweek %in% c(41, 42, 53))))
nrow(point_ests %>% na.omit() %>% filter(!(Week %in% c(41, 42, 53))))
nrow(point_ests %>% na.omit() %>% filter(!(Calendar.Week %in% c(41, 42, 53))))
test2 <- point_ests %>% na.omit() %>% filter(!(Calendar.Week %in% c(41, 42, 53)))
merge(test, test2)
left_join(test, test2)
inner_join(test, test2)
gc()
inner_join(test, test2)
memory.limit()
inner_join(scores_adj, point_ests)
merge(scores_adj, point_ests)
View(d)
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53)))
merge(scores_adj, point_ests)
inner_join(scores_adj, point_ests)
point_ests$Epiweek <- factor(point_ests$Epiweek, levels = c(43:52, 1:18))
inner_join(scores_adj, point_ests)
full_join(scores_adj, point_ests)
View(full_join(scores_adj, point_ests))
View(point_ests)
View(scores_adj)
merge(point_ests, scores_adj)
inner_join(scores_adj, point_ests)
full_join(scores_adj, point_ests)
left_join(scores_adj, point_ests)
View(left_join(scores_adj, point_ests))
View(point_ests)
Point_ests
point_ests <- read_csv("data/point_ests.csv")
View(point_ests)
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err, Location) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53)))
point_ests$Epiweek <- factor(point_ests$Epiweek, levels = c(43:52, 1:18))
scores_adj
merge(point_ests, scores_adj)
View(left_join(scores_adj, point_ests))
point_ests$Location <- factor(point_ests$Location)
levels(point_ests$Location) <- unique(point_ests$Location)
inner_join(scores_adj, point_ests)
full_join(scores_adj, point_ests)
nrow(scores_adj %>% filter(Model != "UTAustin-edm"))
is.na(point_ests)
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err, Location) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
na.omit()
nrow(na.omit(point_ests))
?rbind.data.frame
inner_join(point_ests, scores)
inner_join(point_ests, scores_adj)
merge(point_ests, scores_adj)
View(point_ests)
View(scores_adj)
unique(point_ests$Model)
unique(scores_adj$Model)
?revalue
#na.omit()
plyr::revalue(point_ests$Model, from = unique(point_ests$Model), to = c("CU-EAKFC_SEIRS",
"CU-EAKFC_SIRS", "CU-EKF_SEIRS", "CU-EKF_SIRS", "CU-RHF_SEIRS", "CU-RHF_SIRS", "CU-BMA",
"Delphi-BasisRegression", "Delphi-DeltaDensity1", "Delphi-EmpiricalBayes2", "Delphi-EmpiricalBayes1",
"Delphi-EmpiricalFuture", "Delphi-EmpiricalTraj","Delphi-DeltaDensity2","Delphi-Stat",
"Delphi-Uniform","LANL-DMB","ReichLab-KCDE","ReichLab-KDE","ReichLab-SARIMA1","ReichLab-SARIMA2"))
#na.omit()
plyr::revalue(point_ests$Model, from = unique(point_ests$Model), to = c("CU-EAKFC_SEIRS",
"CU-EAKFC_SIRS", "CU-EKF_SEIRS", "CU-EKF_SIRS", "CU-RHF_SEIRS", "CU-RHF_SIRS", "CU-BMA",
"Delphi-BasisRegression", "Delphi-DeltaDensity1", "Delphi-EmpiricalBayes2", "Delphi-EmpiricalBayes1",
"Delphi-EmpiricalFuture", "Delphi-EmpiricalTraj","Delphi-DeltaDensity2","Delphi-Stat",
"Delphi-Uniform","LANL-DMB","ReichLab-KCDE","ReichLab-KDE","ReichLab-SARIMA1","ReichLab-SARIMA2"))
#na.omit()
plyr::mapvalues(point_ests$Model, from = unique(point_ests$Model), to = c("CU-EAKFC_SEIRS",
"CU-EAKFC_SIRS", "CU-EKF_SEIRS", "CU-EKF_SIRS", "CU-RHF_SEIRS", "CU-RHF_SIRS", "CU-BMA",
"Delphi-BasisRegression", "Delphi-DeltaDensity1", "Delphi-EmpiricalBayes2", "Delphi-EmpiricalBayes1",
"Delphi-EmpiricalFuture", "Delphi-EmpiricalTraj","Delphi-DeltaDensity2","Delphi-Stat",
"Delphi-Uniform","LANL-DMB","ReichLab-KCDE","ReichLab-KDE","ReichLab-SARIMA1","ReichLab-SARIMA2"))
#na.omit()
point_ests$Model <- plyr::mapvalues(point_ests$Model, from = unique(point_ests$Model), to = c("CU-EAKFC_SEIRS",
"CU-EAKFC_SIRS", "CU-EKF_SEIRS", "CU-EKF_SIRS", "CU-RHF_SEIRS", "CU-RHF_SIRS", "CU-BMA",
"Delphi-BasisRegression", "Delphi-DeltaDensity1", "Delphi-EmpiricalBayes2", "Delphi-EmpiricalBayes1",
"Delphi-EmpiricalFuture", "Delphi-EmpiricalTraj","Delphi-DeltaDensity2","Delphi-Stat",
"Delphi-Uniform","LANL-DMB","ReichLab-KCDE","ReichLab-KDE","ReichLab-SARIMA1","ReichLab-SARIMA2"))
unique(point_ests$Model)
point_ests$Epiweek <- factor(point_ests$Epiweek, levels = c(43:52, 1:18))
point_ests$Location <- factor(point_ests$Location)
levels(point_ests$Location) <- unique(point_ests$Location)
merge(point_ests, scores_adj)
View(merge(point_ests, scores_adj))
View(inner_join(point_ests, scores_adj))
summary(inner_join(point_ests, scores_adj))
point_ests <- na.omit(point_ests)
summary(inner_join(point_ests, scores_adj))
View(inner_join(point_ests, scores_adj))
test <- inner_join(point_ests, scores_adj)
scores_all_target_weekly <- scores_adj %>%
group_by(Epiweek, Target) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score)
)
#average score by target
scores_all_target_weekly %>%
ggplot(aes(x = Epiweek, y = err, group=1)) +
geom_line(aes(), size = 1.25, alpha = 0.9) +
labs(title = "Average Model Skill by Epiweek", y = "Skill") +
facet_grid(Target~.)
scores_all_target_weekly <- scores_adj %>%
group_by(Epiweek, Target) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score),
)
#average score by target
scores_all_target_weekly %>%
ggplot(aes(x = Epiweek, y = err, group=1)) +
geom_line(aes(), size = 1.25, alpha = 0.9) +
labs(title = "Average Model Skill by Epiweek", y = "Skill") +
facet_grid(Target~.)
scores_all_target_weekly <- scores_adj %>%
group_by(Epiweek, Target) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score),
err = abs(err)
)
#average score by target
scores_all_target_weekly %>%
ggplot(aes(x = Epiweek, y = err, group=1)) +
geom_line(aes(), size = 1.25, alpha = 0.9) +
labs(title = "Average Model Skill by Epiweek", y = "Skill") +
facet_grid(Target~.)
scores_all_target_weekly <- test %>%
group_by(Epiweek, Target) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score),
err = abs(err)
)
#average score by target
scores_all_target_weekly %>%
ggplot(aes(x = Epiweek, y = err, group=1)) +
geom_line(aes(), size = 1.25, alpha = 0.9) +
labs(title = "Average Model Skill by Epiweek", y = "Skill") +
facet_grid(Target~.)
View(test)
scores_all_target_weekly <- test %>%
group_by(Epiweek, Target) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score),
err = abs(err)
)
scores_all_target_weekly <- test %>%
group_by(Epiweek, Target) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score)
)
View(scores_all_target_weekly)
scores_all_target_weekly <- test %>%
group_by(Epiweek, Target) %>%
dplyr::summarize(
skill = mean(err)
)
View(scores_all_target_weekly)
scores_all_target_weekly %>%
ggplot(aes(x = Epiweek, y = skill, group=1)) +
geom_line(aes(), size = 1.25, alpha = 0.9) +
labs(title = "Average Model Skill by Epiweek", y = "Skill") +
facet_grid(Target~.)
runApp()
runApp()
runApp()
test <- merge(point_ests, acores_adj)
test <- merge(point_ests, scores_adj)
View(test)
runApp()
scores <- read_csv("data/scores.csv")
models <- read_csv("data/model-id-map.csv")
point_ests <- read_csv("data/point_ests.csv")
complete_models <- c(models$`model-id`[models$complete=="true"], "UTAustin-edm")
compartment <- c("CU-EAKFC_SEIRS", "CU-EAKFC_SIRS", "CU-EKF_SEIRS","CU-EKF_SIRS",
"CU-RHF_SIRS","CU-RHF_SEIRS","LANL-DBM")
backfill <- c("LANL-DBM")
## define column with scores of interest
SCORE_COL <- quo(`Multi bin score`)
scores_adj <- scores %>%
filter(Model %in% complete_models) %>%
## if NA, NaN or <-10, set score to -10
mutate(score_adj = dplyr::if_else(is.nan(!!SCORE_COL) | is.na(!!SCORE_COL) ,
-10,
!!SCORE_COL),
Target_Type = dplyr::if_else(Target %in% c("Season onset", "Season peak week", "Season peak percentage"),
"seasonal", "k-week-ahead"),
Model_Type = ifelse(Model %in% compartment, "Compartmental", "Non Compartmental")) %>%
mutate(score_adj = dplyr::if_else(score_adj < -10 , -10, score_adj))
scores_adj <- scores_adj %>% filter(!(Epiweek %in% c(41, 42, 53)))
scores_adj$Epiweek <- factor(scores_adj$Epiweek, levels = c(43:52, 1:18))
scores_adj$Location <- factor(scores_adj$Location)
levels(scores_adj$Location) <- unique(scores_adj$Location)
## test with point_ests
point_ests <- point_ests %>% select(Model = model_name, Year, Epiweek = Calendar.Week, Target, err, Location) %>%
mutate(err = abs(err)) %>%
filter(!(Epiweek %in% c(41, 42, 53))) %>%
na.omit()
point_ests$Model <- plyr::mapvalues(point_ests$Model, from = unique(point_ests$Model), to = c("CU-EAKFC_SEIRS",
"CU-EAKFC_SIRS", "CU-EKF_SEIRS", "CU-EKF_SIRS", "CU-RHF_SEIRS", "CU-RHF_SIRS", "CU-BMA",
"Delphi-BasisRegression", "Delphi-DeltaDensity1", "Delphi-EmpiricalBayes2", "Delphi-EmpiricalBayes1",
"Delphi-EmpiricalFuture", "Delphi-EmpiricalTraj","Delphi-DeltaDensity2","Delphi-Stat",
"Delphi-Uniform","LANL-DMB","ReichLab-KCDE","ReichLab-KDE","ReichLab-SARIMA1","ReichLab-SARIMA2"))
point_ests$Epiweek <- factor(point_ests$Epiweek, levels = c(43:52, 1:18))
point_ests$Location <- factor(point_ests$Location)
levels(point_ests$Location) <- unique(point_ests$Location)
scores_adj <- merge(scores_adj, point_ests)
View(scores_adj)
all_location <- scores_adj %>%
group_by(Epiweek, Season, Target, Target_Type, Model, Model_Type) %>%
summarise(avg_err = mean(err), avg_score = mean(score_adj),Skill = exp(avg_score))
View(all_location)
runApp()
scores_test <- scores_adj %>%
group_by(Epiweek, Season) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score)
)
scores_test <- scores_adj %>%
group_by(Epiweek, Season) %>%
dplyr::summarize(
avg_err = mean(avg_err)
avg_score = mean(score_adj),
skill = exp(avg_score)
)
scores_test <- scores_adj %>%
group_by(Epiweek, Season) %>%
dplyr::summarize(
avg_err = mean(avg_err),
avg_score = mean(score_adj),
skill = exp(avg_score)
)
scores_test <- scores_adj %>%
group_by(Epiweek, Season) %>%
dplyr::summarize(
avg_err = mean(err),
avg_score = mean(score_adj),
skill = exp(avg_score)
)
#overall scores by season
ggplot(scores_test, aes(x = Epiweek, y = skill, col = Season, group=Season)) +
geom_line(aes(linetype = Season), size = 1.25, alpha = 0.9) +
labs(title = "Average Skill by Epiweek and Season", y = "Skill") +
geom_smooth(aes(group = 1))
#overall scores by season
ggplot(scores_test, aes(x = Epiweek, y = avg_err, col = Season, group=Season)) +
geom_line(aes(linetype = Season), size = 1.25, alpha = 0.9) +
labs(title = "Average Skill by Epiweek and Season", y = "Skill") +
geom_smooth(aes(group = 1))
#ggridges density plots by week
scores_test %>% filter(!(Epiweek %in% c(41, 42))) %>%
ggplot(aes(x = skill, y = Epiweek, group = Epiweek, fill = ..x..)) +
geom_density_ridges_gradient() +
theme_ridges() +
scale_fill_viridis(option = "B") +
scale_y_discrete(limits = rev(levels(scores_test$Epiweek))) +
labs(x = "Skill", y = "Epiweek", title = "Average Model Skill by Epiweek")
scores_test_target <- scores_adj %>%
group_by(target_type, Epiweek, Season) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score)
)
#both target at once
scores_test_target %>%
ggplot(aes(x = Epiweek, y = skill, col = Season, group=Season)) +
geom_line(aes(linetype = Season), size = 1.25, alpha = 0.9) +
labs(title = "Average Skill by Epiweek and Season", y = "Skill") +
geom_smooth(aes(group=1)) +
facet_grid(target_type~.)
#density plot
scores_test_target %>%
ggplot(aes(x = skill, fill = target_type, group = target_type)) +
geom_density(alpha = 0.75) + labs(x = "Skill", y = "Density", title ="Average Skill by Target Type")
#ggridges density plot
scores_test_target %>%
ggplot(aes(x = skill, y = Epiweek, group = Epiweek, fill = ..x..)) +
geom_density_ridges_gradient() +
theme_ridges() +
scale_fill_viridis(option = "B") +
scale_y_discrete(limits = rev(levels(scores_test_target$Epiweek))) +
facet_grid(target_type~.) +
labs(x = "Skill", y = "Epiweek", title = "Average Skill by Target Type")
scores_region_type <- scores_adj %>%
group_by(Location, Epiweek, target_type) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score)
)
#scores by region and target type
scores_region_type %>%
ggplot(aes(x = Epiweek, y = skill, col = Location, group=Location)) +
geom_line(aes(linetype = Location), size = 1.25, alpha = 0.9) +
labs(title = "Average Regional Skill by Epiweek and Target Type", y = "Skill") +
geom_smooth(aes(group=1)) +
facet_grid(target_type~.)
scores_test_region <- scores_adj %>%
group_by(Location, Epiweek) %>%
dplyr::summarize(
avg_score = mean(score_adj),
skill = exp(avg_score)
)
#average regional skill
scores_test_region %>%
ggplot(aes(x = Epiweek, y = skill, col = Location, group=Location)) +
geom_line(aes(linetype = Location), size = 1.25, alpha = 0.9) +
labs(title = "Average Regional Skill by Epiweek", y = "Skill") +
geom_smooth(aes(group=1))
#average regional skill
scores_test_region %>%
ggplot(aes(x = Epiweek, y = avg_err, col = Location, group=Location)) +
geom_line(aes(linetype = Location), size = 1.25, alpha = 0.9) +
labs(title = "Average Regional Skill by Epiweek", y = "Skill") +
geom_smooth(aes(group=1))
scores_test_region <- scores_adj %>%
group_by(Location, Epiweek) %>%
dplyr::summarize(
avg_err = mean(err),
avg_score = mean(score_adj),
skill = exp(avg_score)
)
#average regional skill
scores_test_region %>%
ggplot(aes(x = Epiweek, y = avg_err, col = Location, group=Location)) +
geom_line(aes(linetype = Location), size = 1.25, alpha = 0.9) +
labs(title = "Average Regional Skill by Epiweek", y = "Skill") +
geom_smooth(aes(group=1))
scores_test_model <- scores_adj %>%
group_by(Model, Epiweek) %>%
dplyr::summarize(
avg_err = mean(err),
avg_score = mean(score_adj),
skill = exp(avg_score)
)
#scores by model
ggplotly(scores_test_model %>%
ggplot(aes(x = Epiweek, y = avg_err, col = Model, group = 1)) +
geom_line(size = 1.25, alpha = 0.9) +
labs(title = "Average Seasonal Skill by Epiweek and Season", y = "Skill"))
runApp()
ggplot(scores_adj, aes(x = Epiweek, y = ifelse(FALSE, Skill, avg_err))) + geom_line(size = 1.1, alpha = 0.9)
ggplot(scores_adj, aes(x = Epiweek, y = ifelse(FALSE, Skill, err))) + geom_line(size = 1.1, alpha = 0.9)
scores_test <- scores_adj %>%
group_by(Epiweek, Season) %>%
dplyr::summarize(
avg_err = mean(err),
avg_score = mean(score_adj),
skill = exp(avg_score)
)
ggplot(scores_test, aes(x = Epiweek, y = ifelse(FALSE, Skill, err))) + geom_line(size = 1.1, alpha = 0.9)
ggplot(scores_test, aes(x = Epiweek, y = ifelse(FALSE, Skill, avgerr))) + geom_line(size = 1.1, alpha = 0.9)
ggplot(scores_test, aes(x = Epiweek, y = ifelse(FALSE, Skill, avg_err))) + geom_line(size = 1.1, alpha = 0.9)
ggplot(scores_test, aes(x = Epiweek, y = avg_err)) + geom_line(size = 1.1, alpha = 0.9)
ggplot(scores_test, aes(x = Epiweek, y = avg_err)) + geom_line(size = 1.1, alpha = 0.9, group = 1)
var = ifelse(FALSE, Skill, avg_err)
var = ifelse(FALSE, 'Skill', 'avg_err')
loc_y <- ifelse(input$location_y == "location_skill", Skill, avg_err)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gc()
runApp()
memory.limit()
?memory.limit()
memory.size()
runApp()
runApp()
